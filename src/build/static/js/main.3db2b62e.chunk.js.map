{"version":3,"sources":["pages/HomePage.js","pages/AboutPage.js","components/ArticlesList.js","pages/article-content.js","pages/ArticlesListPage.js","components/CommentsList.js","components/UpvoteSection.js","components/AddCommentForm.js","pages/NotFoundPage.js","pages/ArticlePage.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","AboutPage","ArticlesList","articles","map","art","key","className","to","name","title","content","substring","ArticlesListPage","articleContent","CommentsList","comments","comment","username","text","UpvoteSection","articleName","upvotes","setArticleInfo","upvoteArticle","a","fetch","method","result","json","body","id","onClick","AddCommentForm","useState","setUsername","commentText","setCommentText","addComment","JSON","stringify","headers","console","log","type","value","onChange","event","target","rows","cols","NotFoundPage","ArticlePage","match","params","article","find","articleInfo","useEffect","fetchData","otherArticles","filter","paragraph","NavBar","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3db2b62e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst HomePage = () => (\r\n  <>\r\n  <h1>Hello, welcome to my blog!</h1>\r\n  <p>\r\n    blablabla blab lab lablbal balbal blablab albaba lalbal balb albal ablab abl abal blaba lbal balablab la al bla\r\n  </p>\r\n  <p>\r\n    blablabla blab lab lablbal balbal blablab albaba lalbal balb albal ablab abl abal blaba lbal balablab la al bla\r\n  </p>\r\n  <p>\r\n    blablabla blab lab lablbal balbal blablab albaba lalbal balb albal ablab abl abal blaba lbal balablab la al bla\r\n  </p>\r\n  </>\r\n)\r\n\r\nexport default HomePage;","import React from 'react';\r\n\r\n\r\nconst AboutPage = () => (\r\n  <>\r\n  <h1>This is ABOUT page</h1>\r\n  </>\r\n)\r\n\r\nexport default AboutPage;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ArticlesList = ({ articles }) => (\r\n  <>\r\n    {articles.map((art, key) => (\r\n      <Link className=\"article-list-item\" key={key} to={`/article/${art.name}`}>\r\n        <h3>{art.title}</h3>\r\n        <p>{art.content[0].substring(0, 150)}...</p>\r\n      </Link>\r\n    ))}\r\n  </>\r\n);\r\n\r\nexport default ArticlesList;","// just an example format, one of many possible\r\n\r\nconst articles = [\r\n  {\r\n    name: 'learn-react',\r\n    title: 'The Fastest Way To Learn React!',\r\n    content: [\r\n      'People are really freaking out about deepfake videos, the technology that can make people say things they never actually said. But what about deepfake audio? Audio spoofing has gotten very good, and there’s no better example than this website which lets you say anything you want in the voice of self-help guru and Canadian professor Jordan B. Peterson.',\r\n      'At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.',\r\n      'But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?',\r\n      'On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains.'\r\n    ]\r\n  },\r\n  {\r\n    name: 'learn-all',\r\n    title: 'The Fastest Way To Learn Universe!',\r\n    content: [\r\n      'People are really freaking out about deepfake videos, the technology that can make people say things they never actually said. But what about deepfake audio? Audio spoofing has gotten very good, and there’s no better example than this website which lets you say anything you want in the voice of self-help guru and Canadian professor Jordan B. Peterson.',\r\n      'At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.',\r\n      'But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?',\r\n      'On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains.'\r\n    ]\r\n  },\r\n  {\r\n    name: 'unlearn-all',\r\n    title: 'Best Way To Forget Everything!',\r\n    content: [\r\n      'People are really freaking out about deepfake videos, the technology that can make people say things they never actually said. But what about deepfake audio? Audio spoofing has gotten very good, and there’s no better example than this website which lets you say anything you want in the voice of self-help guru and Canadian professor Jordan B. Peterson.',\r\n      'At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.',\r\n      'But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?',\r\n      'On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains.'\r\n    ]\r\n  }\r\n]\r\n\r\nexport default articles;","import React from 'react';\r\nimport ArticlesList from '../components/ArticlesList';\r\nimport articleContent from './article-content'\r\n\r\n\r\nconst ArticlesListPage = () => (\r\n  <>\r\n    <h1>Articles List page</h1>\r\n    <ArticlesList articles={articleContent} />\r\n  </>\r\n);\r\n\r\nexport default ArticlesListPage;","import React from 'react';\r\n\r\nconst CommentsList = ({comments}) => (\r\n  <>\r\n  <h3>Comments:</h3>\r\n  {comments.map((comment,key) => (\r\n    <div className=\"comment-item\" key={key}>\r\n      <h4>{comment.username}</h4>\r\n      <p>{comment.text}</p>\r\n    </div>\r\n  ))}\r\n  </>\r\n)\r\n\r\nexport default CommentsList;","import React from 'react';\r\n\r\nconst UpvoteSection = ({ articleName, upvotes, setArticleInfo}) => {\r\n\r\n  const upvoteArticle = async () => {\r\n    const result = await fetch(`/api/articles/${articleName}/upvote`, {\r\n      method: 'post',\r\n    });\r\n    const body = await result.json();\r\n    setArticleInfo(body);\r\n  }\r\n\r\n  return (\r\n    <div id=\"upvoteSection\">\r\n      <button onClick={() => upvoteArticle()}>Upvote</button>\r\n      <p>This post has been upvoted {upvotes} times</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UpvoteSection;","import React, { useState } from 'react';\r\n\r\nconst AddCommentForm = ({articleName, setArticleInfo}) => {\r\n\r\n  const [username, setUsername] = useState('');\r\n  const [commentText, setCommentText] = useState('');\r\n\r\n  const addComment = async () => {\r\n    const result = await fetch(`/api/articles/${articleName}/add-comment`, {\r\n      method: 'post',\r\n      body: JSON.stringify({ username, text: commentText}),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    });\r\n    console.log(result)\r\n    const body = await result.json();\r\n    console.log(body)\r\n    setArticleInfo(body);\r\n\r\n    setUsername('');\r\n    setCommentText('');\r\n  }\r\n\r\n  return (\r\n    <div id=\"addCommentForm\">\r\n      <h3>Add Comment</h3>\r\n      <label>\r\n        Name:\r\n        <input type=\"text\" value={username} onChange={(event) => setUsername(event.target.value)} />\r\n      </label>\r\n      <label>\r\n        Comment:\r\n        <textarea rows=\"4\" cols=\"50\" value={commentText} onChange={(event) => setCommentText(event.target.value)}/>\r\n      </label>\r\n      <button onClick={() => addComment()}>Add Comment</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddCommentForm;","import React from 'react';\r\n\r\nconst NotFoundPage = () => (\r\n  <h1>404: Page Not Found!</h1>\r\n)\r\n\r\nexport default NotFoundPage;","import React, {useState, useEffect} from 'react';\r\nimport ArticlesList from '../components/ArticlesList'\r\nimport CommentsList from '../components/CommentsList';\r\nimport UpvoteSection from '../components/UpvoteSection';\r\nimport AddCommentForm from '../components/AddCommentForm';\r\nimport articleContent from './article-content'; \r\nimport NotFoundPage from './NotFoundPage';\r\n\r\n\r\nconst ArticlePage = ({ match }) => {\r\n  const name = match.params.name;\r\n  const article = articleContent.find(article => article.name === name);\r\n\r\n  const [articleInfo, setArticleInfo ] = useState({ upvotes: 0, comments: []});\r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await fetch(`/api/articles/${name}`);    // we can skip this http://localhost:8000 because of proxy in package.json\r\n      const body = await result.json();\r\n      setArticleInfo(body);\r\n    }\r\n    fetchData();\r\n  }, [name]);  // [change state when value given in this array changes] - it changes when url changes\r\n\r\n  if (!article) return <NotFoundPage />\r\n\r\n  const otherArticles = articleContent.filter( art => art.name !== name);\r\n\r\n  return (\r\n    <>\r\n      <h1>{article.title}</h1>\r\n      <UpvoteSection articleName={name} upvotes={articleInfo.upvotes} setArticleInfo={setArticleInfo} />\r\n      {article.content.map((paragraph, key) => (\r\n        <p key={key}>{paragraph}</p>\r\n      ))}\r\n      <CommentsList comments={articleInfo.comments} />\r\n      <AddCommentForm articleName={name} setArticleInfo={setArticleInfo} />\r\n      <h3>Other Articles:</h3>\r\n      <ArticlesList articles={otherArticles} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ArticlePage;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NavBar = () => (\r\n  <nav>\r\n    <ul>\r\n      <li>\r\n        <Link to=\"/\">Home</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/about\">About</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/articles-list\">Articles</Link>\r\n      </li>\r\n\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport default NavBar;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport AboutPage from './pages/AboutPage';\nimport ArticlesListPage from './pages/ArticlesListPage';\nimport ArticlePage from './pages/ArticlePage';\nimport NavBar from './NavBar';\nimport NotFoundPage from './pages/NotFoundPage';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar />\n        <div id=\"page-container\">\n          <Switch>\n            <Route path=\"/\" component={HomePage} exact />\n            <Route path=\"/about\" component={AboutPage} exact />\n            <Route path=\"/articles-list\" component={ArticlesListPage} exact />\n            <Route path=\"/article/:name\" component={ArticlePage} exact />\n            <Route component={NotFoundPage} />\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n/*\n----------\n-URL parameters-\nallow variable urls in routes, e.g. to get a specific article\n\nexample url parameter\n...path=\"/article/:parameter\"...\n\nRouter passes the variable as a prop ('match') to the linked component which then loads proper content\n\n----------\n-404-\ncreate a 404 page\nadd ROUTE for the 404page as last Route, without a path prop\nimport SWITCH from react-router-dom\nwrap all routes in the Switch tag\nwithout the Switch react would load the 404 whenever a url is wrong\n\n\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}